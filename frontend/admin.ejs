<!DOCTYPE html>
<html>
<head>
  <title>Admin</title>
  <link rel="stylesheet" href="/style.css">
</head>
<body>
  <h1>Admin</h1>
  <%- include('partials/nav', { page: 'admin', user: user }) %>

  <!-- Form to trigger a full database reset -->
  <h2>Database</h2>
  <form id="resetForm" method="POST" action="/admin/reset-db">
    <button type="submit">Reset Tenders Table</button>
  </form>

  <!-- Form allowing the cron schedule to be changed dynamically -->
  <h2>Cron Schedule</h2>
  <form id="cronForm">
    <label>Hour
      <select id="cronHour"></select>
    </label>
    <label>Minute
      <select id="cronMin"></select>
    </label>
    <label>Day
      <select id="cronDom"></select>
    </label>
    <label>Month
      <select id="cronMon"></select>
    </label>
    <label>Weekday
      <select id="cronDow"></select>
    </label>
    <button type="submit">Update Schedule</button>
    <span id="cronPreview"></span>
  </form>

  <!-- Manage scraping sources -->
  <h2>Sources</h2>
  <!-- Help text explaining what each Add Source field does. The EU Supply
       values are shown as a concrete example that users can copy -->
  <div id="sourceHelp">
    <p>Fill out the form below to register a new tender source.</p>
    <ul>
      <li><strong>Key</strong> &ndash; short identifier, e.g. <code>eusupply</code></li>
      <li><strong>Label</strong> &ndash; display name such as <code>EU Supply UK</code></li>
      <li><strong>Search URL</strong> &ndash; feed or listing, for EU Supply
        <code>https://uk.eu-supply.com/ctm/supplier/publictenders?B=UK</code></li>
      <li><strong>Base URL</strong> &ndash; website root, e.g.
        <code>https://uk.eu-supply.com</code></li>
    </ul>
  </div>
  <table id="sourceTable">
    <tr><th>Key</th><th>Label</th><th>URL</th><th>Base</th></tr>
    <% Object.keys(sources).forEach(key => { %>
      <tr class="sourceRow toggle-row" data-key="<%= key %>">
        <td><%= key %></td>
        <td><%= sources[key].label %></td>
        <td><%= sources[key].url %></td>
        <td><%= sources[key].base %></td>
      </tr>
      <tr class="detailRow" data-key="<%= key %>">
        <td colspan="4">
          Last scraped: <%= sourceStats[key] ? sourceStats[key].last_scraped || 'Never' : 'Never' %><br>
          Tenders last scrape: <%= sourceStats[key] ? sourceStats[key].last_added : 0 %><br>
          Total tenders: <%= sourceStats[key] ? sourceStats[key].total : 0 %><br>
          <button class="editBtn" type="button">Edit</button>
          <button class="deleteBtn" type="button">Delete</button>
        </td>
      </tr>
    <% }) %>
  </table>
  <form id="addSourceForm">
    <input id="newKey" placeholder="Key" required>
    <input id="newLabel" placeholder="Label" required>
    <input id="newUrl" placeholder="Search URL" required>
    <input id="newBase" placeholder="Base URL" required>
    <button id="addBtn" type="submit">Add Source</button>
  </form>

  <!-- Award source management mirrors the tender source UI -->
  <h2>Award Sources</h2>
  <div id="awardSourceHelp">
    <p>Define sources for awarded contracts.</p>
  </div>
  <table id="awardSourceTable">
    <tr><th>Key</th><th>Label</th><th>URL</th><th>Base</th></tr>
    <% Object.keys(awardSources).forEach(key => { %>
      <tr class="awardSourceRow toggle-row" data-key="<%= key %>">
        <td><%= key %></td>
        <td><%= awardSources[key].label %></td>
        <td><%= awardSources[key].url %></td>
        <td><%= awardSources[key].base %></td>
      </tr>
      <tr class="awardDetailRow" data-key="<%= key %>">
        <td colspan="4">
          Last scraped: <%= sourceStats[key] ? sourceStats[key].last_scraped || 'Never' : 'Never' %><br>
          Contracts last scrape: <%= sourceStats[key] ? sourceStats[key].last_added : 0 %><br>
          Total contracts: <%= sourceStats[key] ? sourceStats[key].total : 0 %><br>
          <button class="editBtn" type="button">Edit</button>
          <button class="deleteBtn" type="button">Delete</button>
        </td>
      </tr>
    <% }) %>
  </table>
  <form id="addAwardSourceForm">
    <input id="newAwardKey" placeholder="Key" required>
    <input id="newAwardLabel" placeholder="Label" required>
    <input id="newAwardUrl" placeholder="Search URL" required>
    <input id="newAwardBase" placeholder="Base URL" required>
    <button id="addAwardBtn" type="submit">Add Award Source</button>
  </form>

<script>
const sourceData = <%- JSON.stringify(sources) %>;
const statsData = <%- JSON.stringify(sourceStats) %>;
let editingKey = null;
const awardSourceData = <%- JSON.stringify(awardSources) %>;
let editingAwardKey = null;

// Populate the cron schedule dropdowns with numeric options
function fill(select, max) {
  for (let i = 0; i <= max; i++) {
    const opt = document.createElement('option');
    opt.value = i;
    opt.textContent = i;
    select.appendChild(opt);
  }
}
fill(document.getElementById('cronMin'), 59);
fill(document.getElementById('cronHour'), 23);
fill(document.getElementById('cronDom'), 31);
fill(document.getElementById('cronMon'), 12);
fill(document.getElementById('cronDow'), 6);

// Initialise selects based on the stored schedule
const parts = '<%= cron %>'.split(' ');
document.getElementById('cronMin').value = parts[0];
document.getElementById('cronHour').value = parts[1];
document.getElementById('cronDom').value = parts[2];
document.getElementById('cronMon').value = parts[3];
document.getElementById('cronDow').value = parts[4];

const cronPreview = document.getElementById('cronPreview');
// Build a cron expression from the dropdowns.
// Note: cron syntax uses the order minute then hour, even
// though the form displays hour first for readability.
function buildCron() {
  const min = document.getElementById('cronMin').value;
  const hour = document.getElementById('cronHour').value;
  const dom = document.getElementById('cronDom').value;
  const mon = document.getElementById('cronMon').value;
  const dow = document.getElementById('cronDow').value;
  const str = `${min} ${hour} ${dom} ${mon} ${dow}`;
  cronPreview.textContent = str;
  return str;
}
document.querySelectorAll('#cronForm select').forEach(sel => sel.addEventListener('change', buildCron));
buildCron();

// Add a new tender source and reload on success.
document.getElementById('addSourceForm').addEventListener('submit', async e => {
  e.preventDefault();
  const key = document.getElementById('newKey').value.trim();
  const label = document.getElementById('newLabel').value.trim();
  const url = document.getElementById('newUrl').value.trim();
  const base = document.getElementById('newBase').value.trim();
  let method = 'POST';
  let endpoint = '/sources';
  if (editingKey) {
    method = 'PUT';
    endpoint = `/sources/${encodeURIComponent(editingKey)}`;
  }
  const res = await fetch(endpoint, {
    method,
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ key, label, url, base })
  });
  if (res.ok) {
    location.reload();
  } else {
    alert('Failed to save source');
  }
});

// Hook up edit and delete buttons for each listed source
document.querySelectorAll('#sourceTable .sourceRow').forEach(row => {
  const key = row.dataset.key;
  const detail = document.querySelector(`.detailRow[data-key="${key}"]`);
  detail.querySelector('.editBtn').addEventListener('click', () => {
    const s = sourceData[key];
    document.getElementById('newKey').value = key;
    document.getElementById('newKey').disabled = true;
    document.getElementById('newLabel').value = s.label;
    document.getElementById('newUrl').value = s.url;
    document.getElementById('newBase').value = s.base;
    document.getElementById('addBtn').textContent = 'Update Source';
    editingKey = key;
  });
  detail.querySelector('.deleteBtn').addEventListener('click', async () => {
    if (!confirm(`Delete source ${key}?`)) return;
    const res = await fetch(`/sources/${encodeURIComponent(key)}`, { method: 'DELETE' });
    if (res.ok) {
      location.reload();
    } else {
      alert('Failed to delete source');
    }
  });
});

// Add a new award source using the dedicated API.
document.getElementById('addAwardSourceForm').addEventListener('submit', async e => {
  e.preventDefault();
  const key = document.getElementById('newAwardKey').value.trim();
  const label = document.getElementById('newAwardLabel').value.trim();
  const url = document.getElementById('newAwardUrl').value.trim();
  const base = document.getElementById('newAwardBase').value.trim();
  let method = 'POST';
  let endpoint = '/award-sources';
  if (editingAwardKey) {
    method = 'PUT';
    endpoint = `/award-sources/${encodeURIComponent(editingAwardKey)}`;
  }
  const res = await fetch(endpoint, {
    method,
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ key, label, url, base })
  });
  if (res.ok) {
    location.reload();
  } else {
    alert('Failed to save source');
  }
});

// Edit/delete handlers for award sources
document.querySelectorAll('#awardSourceTable .awardSourceRow').forEach(row => {
  const key = row.dataset.key;
  const detail = document.querySelector(`.awardDetailRow[data-key="${key}"]`);
  detail.querySelector('.editBtn').addEventListener('click', () => {
    const s = awardSourceData[key];
    document.getElementById('newAwardKey').value = key;
    document.getElementById('newAwardKey').disabled = true;
    document.getElementById('newAwardLabel').value = s.label;
    document.getElementById('newAwardUrl').value = s.url;
    document.getElementById('newAwardBase').value = s.base;
    document.getElementById('addAwardBtn').textContent = 'Update Award Source';
    editingAwardKey = key;
  });
  detail.querySelector('.deleteBtn').addEventListener('click', async () => {
    if (!confirm(`Delete source ${key}?`)) return;
    const res = await fetch(`/award-sources/${encodeURIComponent(key)}`, { method: 'DELETE' });
    if (res.ok) {
      location.reload();
    } else {
      alert('Failed to delete source');
    }
  });
});

// Submit new cron schedule so the server can reschedule the scraper.
// Build the cron expression from the dropdowns and submit it to the server.
document.getElementById('cronForm').addEventListener('submit', async e => {
  e.preventDefault();
  const schedule = buildCron();
  const res = await fetch('/admin/cron', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Accept: 'application/json'
    },
    body: JSON.stringify({ schedule })
  });
  if (res.status === 401) {
    alert('Please log in first');
    window.location = '/login';
    return;
  }
  const data = await res.json().catch(() => null);
  if (res.ok && data && data.success) {
    alert('Schedule updated');
  } else {
    alert('Failed to update schedule');
  }
});

// Confirm and send a request to drop and recreate the tenders table.
document.getElementById('resetForm').addEventListener('submit', async e => {
  e.preventDefault();
  if (!confirm('This will delete all tenders. Continue?')) return;
  const res = await fetch('/admin/reset-db', {
    method: 'POST',
    headers: { Accept: 'application/json' }
  });
  if (res.status === 401) {
    alert('Please log in first');
    window.location = '/login';
    return;
  }
  const data = await res.json().catch(() => null);
  if (res.ok && data && data.success) {
    alert('Database reset');
  } else {
    alert('Failed to reset database');
  }
});
</script>
<!-- Enhance tables with search, filter and sort capabilities -->
<script src="/table-tools.js"></script>
</body>
</html>
