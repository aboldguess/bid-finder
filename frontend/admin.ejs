<!DOCTYPE html>
<html>
<head>
  <title>Admin</title>
  <link rel="stylesheet" href="/style.css">
</head>
<body>
  <h1>Admin</h1>
  <a href="/">Back to dashboard</a> |
  <a href="/logout">Logout</a>

  <!-- Form to trigger a full database reset -->
  <h2>Database</h2>
  <form id="resetForm" method="POST" action="/admin/reset-db">
    <button type="submit">Reset Tenders Table</button>
  </form>

  <!-- Form allowing the cron schedule to be changed dynamically -->
  <h2>Cron Schedule</h2>
  <form id="cronForm">
    <input id="cronInput" placeholder="* * * * *" value="<%= cron %>" required>
    <button type="submit">Update Schedule</button>
  </form>

  <!-- Manage scraping sources -->
  <h2>Sources</h2>
  <!-- Help text explaining what each Add Source field does. The EU Supply
       values are shown as a concrete example that users can copy -->
  <div id="sourceHelp">
    <p>Fill out the form below to register a new tender source.</p>
    <ul>
      <li><strong>Key</strong> &ndash; short identifier, e.g. <code>eusupply</code></li>
      <li><strong>Label</strong> &ndash; display name such as <code>EU Supply UK</code></li>
      <li><strong>Search URL</strong> &ndash; feed or listing, for EU Supply
        <code>https://uk.eu-supply.com/ctm/supplier/publictenders?B=UK</code></li>
      <li><strong>Base URL</strong> &ndash; website root, e.g.
        <code>https://uk.eu-supply.com</code></li>
    </ul>
  </div>
  <ul id="sourceList">
    <% Object.keys(sources).forEach(key => { %>
      <li data-key="<%= key %>">
        <%= key %> - <%= sources[key].label %>
        <button class="editBtn" type="button">Edit</button>
        <button class="deleteBtn" type="button">Delete</button>
      </li>
    <% }) %>
  </ul>
  <form id="addSourceForm">
    <input id="newKey" placeholder="Key" required>
    <input id="newLabel" placeholder="Label" required>
    <input id="newUrl" placeholder="Search URL" required>
    <input id="newBase" placeholder="Base URL" required>
    <button id="addBtn" type="submit">Add Source</button>
  </form>

<script>
const sourceData = <%- JSON.stringify(sources) %>;
let editingKey = null;

// Add a new tender source and reload on success.
document.getElementById('addSourceForm').addEventListener('submit', async e => {
  e.preventDefault();
  const key = document.getElementById('newKey').value.trim();
  const label = document.getElementById('newLabel').value.trim();
  const url = document.getElementById('newUrl').value.trim();
  const base = document.getElementById('newBase').value.trim();
  let method = 'POST';
  let endpoint = '/sources';
  if (editingKey) {
    method = 'PUT';
    endpoint = `/sources/${encodeURIComponent(editingKey)}`;
  }
  const res = await fetch(endpoint, {
    method,
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ key, label, url, base })
  });
  if (res.ok) {
    location.reload();
  } else {
    alert('Failed to save source');
  }
});

// Hook up edit and delete buttons for each listed source
document.querySelectorAll('#sourceList li').forEach(li => {
  const key = li.dataset.key;
  li.querySelector('.editBtn').addEventListener('click', () => {
    const s = sourceData[key];
    document.getElementById('newKey').value = key;
    document.getElementById('newKey').disabled = true;
    document.getElementById('newLabel').value = s.label;
    document.getElementById('newUrl').value = s.url;
    document.getElementById('newBase').value = s.base;
    document.getElementById('addBtn').textContent = 'Update Source';
    editingKey = key;
  });
  li.querySelector('.deleteBtn').addEventListener('click', async () => {
    if (!confirm(`Delete source ${key}?`)) return;
    const res = await fetch(`/sources/${encodeURIComponent(key)}`, { method: 'DELETE' });
    if (res.ok) {
      location.reload();
    } else {
      alert('Failed to delete source');
    }
  });
});

// Submit new cron schedule so the server can reschedule the scraper.
document.getElementById('cronForm').addEventListener('submit', async e => {
  e.preventDefault();
  const schedule = document.getElementById('cronInput').value.trim();
  const res = await fetch('/admin/cron', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ schedule })
  });
  if (res.ok) {
    alert('Schedule updated');
  } else {
    alert('Failed to update schedule');
  }
});

// Confirm and send a request to drop and recreate the tenders table.
document.getElementById('resetForm').addEventListener('submit', async e => {
  e.preventDefault();
  if (!confirm('This will delete all tenders. Continue?')) return;
  const res = await fetch('/admin/reset-db', { method: 'POST' });
  if (res.ok) {
    alert('Database reset');
  } else {
    alert('Failed to reset database');
  }
});
</script>
</body>
</html>
