<!DOCTYPE html>
<html>
<head>
  <title>Scraper</title>
  <link rel="stylesheet" href="/style.css">
</head>
<body>
  <h1>Scraper</h1>
  <%- include('partials/nav', { page: 'scraper', user: user }) %>
  <div id="instructions">
    Manage tender and award sources here. Hover over each input for guidance or
    visit the <a href="/help">help page</a> for full instructions.
  </div>
  <!-- Collapsible section listing administrative database actions -->
  <details id="dbTools">
    <summary><h2>Database Tools</h2></summary>
    <form id="deleteAllForm">
      <button type="submit">Delete All Records</button>
    </form>
    <form id="deleteBeforeForm">
      <input type="date" id="deleteDate">
      <button type="submit">Delete Records Before Date</button>
    </form>
  </details> <!-- end database tools section -->

  <!-- Form allowing the cron schedule to be changed dynamically -->
  <h2>Cron Schedule</h2>
  <form id="cronForm">
    <label>Hour
      <select id="cronHour"></select>
    </label>
    <label>Minute
      <select id="cronMin"></select>
    </label>
    <label>Day
      <select id="cronDom"></select>
    </label>
    <label>Month
      <select id="cronMon"></select>
    </label>
    <label>Weekday
      <select id="cronDow"></select>
    </label>
    <button type="submit">Update Schedule</button>
    <span id="cronPreview"></span>
  </form>

  <!-- Source list for tenders -->
  <details id="opportunitySources">
    <summary><h2>Opportunity Sources</h2></summary>
    <p class="hint">Click a row to view details. Double-click to edit it.</p>
    <table id="sourceTable">
    <tr>
      <th>Key</th>
      <th>Label</th>
      <th>Status</th>
      <th>Last Scraped</th>
      <th>Contracts Last Run</th>
      <th>Total</th>
      <th>Actions</th>
    </tr>
    <% Object.keys(sources).forEach(key => { %>
      <tr class="sourceRow toggle-row" data-key="<%= key %>">
        <td><%= key %></td>
        <td><%= sources[key].label %></td>
        <td class="status"><%= sourceStatus[key] || 'unknown' %></td>
        <td><%= sourceStats[key] ? sourceStats[key].last_scraped || 'Never' : 'Never' %></td>
        <td><%= sourceStats[key] ? sourceStats[key].last_added : 0 %></td>
        <td><%= sourceStats[key] ? sourceStats[key].total : 0 %></td>
        <td>
          <button class="testBtn">Test Now</button>
          <button class="scrapeBtn">Scrape Now</button>
        </td>
      </tr>
      <tr class="detailRow" data-key="<%= key %>">
        <td colspan="7">
          <div class="details">
            URL: <span class="url"><%= sources[key].url %></span><br>
            Base: <span class="base"><%= sources[key].base %></span><br>
            Parser: <span class="parser"><%= sources[key].parser %></span><br>
            <button class="editBtn">Edit</button>
            <button class="deleteBtn">Delete</button>
            <button class="deleteBtn">Delete</button>
          </div>
          <div class="editForm" style="display:none">
            <input class="editLabel" value="<%= sources[key].label %>">
            <input class="editUrl" value="<%= sources[key].url %>">
            <input class="editBase" value="<%= sources[key].base %>">
            <input class="editParser" value="<%= sources[key].parser %>">
            <button class="saveBtn">Save</button>
            <button class="cancelBtn">Cancel</button>
          </div>
        </td>
      </tr>
    <% }) %>
  </table>
  <form id="addSourceForm">
    <input id="newKey" placeholder="Key" title="Short identifier" required>
    <input id="newLabel" placeholder="Label" title="Display name" required>
    <input id="newUrl" placeholder="Search URL" title="Feed or search page" required>
    <input id="newBase" placeholder="Base URL" title="Website root" required>
    <!-- Optional parser name; defaults to Contracts Finder if left unchanged -->
    <input id="newParser" placeholder="Parser" title="Parser name" value="contractsFinder">
    <button id="addBtn" type="submit">Add Source</button>
  </form>

  </details> <!-- end opportunity sources section -->
  <!-- Award source management mirrors the tender source UI -->
  <details id="awardSources">
    <summary><h2>Award Sources</h2></summary>
  <table id="awardSourceTable">
    <tr>
      <th>Key</th>
      <th>Label</th>
      <th>Status</th>
      <th>Last Scraped</th>
      <th>Contracts Last Run</th>
      <th>Total</th>
      <th>Actions</th>
    </tr>
    <% Object.keys(awardSources).forEach(key => { %>
      <tr class="awardSourceRow toggle-row" data-key="<%= key %>">
        <td><%= key %></td>
        <td><%= awardSources[key].label %></td>
        <td class="status"><%= sourceStatus[key] || 'unknown' %></td>
        <td><%= sourceStats[key] ? sourceStats[key].last_scraped || 'Never' : 'Never' %></td>
        <td><%= sourceStats[key] ? sourceStats[key].last_added : 0 %></td>
        <td><%= sourceStats[key] ? sourceStats[key].total : 0 %></td>
        <td>
          <button class="testAwardBtn">Test Now</button>
          <button class="scrapeAwardBtn">Scrape Now</button>
        </td>
      </tr>
      <tr class="awardDetailRow" data-key="<%= key %>">
        <td colspan="7">
          <div class="details">
            URL: <span class="url"><%= awardSources[key].url %></span><br>
            Base: <span class="base"><%= awardSources[key].base %></span><br>
            Parser: <span class="parser"><%= awardSources[key].parser %></span><br>
            <button class="editBtn">Edit</button>
            <button class="deleteBtn">Delete</button>
          </div>
          <div class="editForm" style="display:none">
            <input class="editLabel" value="<%= awardSources[key].label %>">
            <input class="editUrl" value="<%= awardSources[key].url %>">
            <input class="editBase" value="<%= awardSources[key].base %>">
            <input class="editParser" value="<%= awardSources[key].parser %>">
            <button class="saveBtn">Save</button>
            <button class="cancelBtn">Cancel</button>
          </div>
        </td>
      </tr>
    <% }) %>
  </table>
  <form id="addAwardSourceForm">
    <input id="newAwardKey" placeholder="Key" title="Short identifier" required>
    <input id="newAwardLabel" placeholder="Label" title="Display name" required>
    <input id="newAwardUrl" placeholder="Search URL" title="Award feed" required>
    <input id="newAwardBase" placeholder="Base URL" title="Website root" required>
    <!-- Optional parser field for award feed scraping -->
    <input id="newAwardParser" placeholder="Parser" title="Parser name" value="contractsFinder">
    <button id="addAwardBtn" type="submit">Add Award Source</button>
  </form>

  </details> <!-- end award sources section -->

<script>
const sourceData = <%- JSON.stringify(sources) %>;
const awardSourceData = <%- JSON.stringify(awardSources) %>;
let editingKey = null;
let editingAwardKey = null;
// Expand row to show configuration details.
document.querySelectorAll('.sourceRow').forEach(row => {
  const key = row.dataset.key;
  row.querySelector('.testBtn').addEventListener('click', async e => {
    e.stopPropagation();
    row.querySelector('.status').textContent = 'testing...';
    const res = await fetch('/test-source?key='+encodeURIComponent(key));
    const data = await res.json();
    row.querySelector('.status').textContent = data.status;
  });
  row.querySelector('.scrapeBtn').addEventListener('click', async e => {
    e.stopPropagation();
    row.querySelector('.status').textContent = 'scraping...';
    const res = await fetch('/scrape?source='+encodeURIComponent(key));
    const data = await res.json();
    row.querySelector('.status').textContent = 'added '+data.added;
  });
});

// Editing existing source values inline.
document.querySelectorAll('.detailRow').forEach(row => {
  const key = row.dataset.key;
  const editBtn = row.querySelector('.editBtn');
  const editForm = row.querySelector('.editForm');
  const details = row.querySelector('.details');
  editBtn.addEventListener('click', e => {
    e.stopPropagation();
    editForm.style.display = '';
    details.style.display = 'none';
  });
  row.querySelector('.cancelBtn').addEventListener('click', e => {
    e.stopPropagation();
    editForm.style.display = 'none';
    details.style.display = '';
  });
  row.querySelector('.saveBtn').addEventListener('click', async e => {
    e.stopPropagation();
    const label = editForm.querySelector('.editLabel').value.trim();
    const url = editForm.querySelector('.editUrl').value.trim();
    const base = editForm.querySelector('.editBase').value.trim();
    const parser = editForm.querySelector('.editParser').value.trim();
    const res = await fetch('/sources/'+encodeURIComponent(key), {
      method: 'PUT',
      headers: {'Content-Type':'application/json'},
      body: JSON.stringify({label,url,base,parser})
    });
    if(res.ok){
      location.reload();
    } else {
      alert('Failed to update source');
    }
  });
});

// Add or update a tender source.
document.getElementById('addSourceForm').addEventListener('submit', async e => {
  e.preventDefault();
  const key = document.getElementById('newKey').value.trim();
  const label = document.getElementById('newLabel').value.trim();
  const url = document.getElementById('newUrl').value.trim();
  const base = document.getElementById('newBase').value.trim();
  // Parser field allows custom HTML parsing rules
  const parser = document.getElementById('newParser').value.trim();
  let method = 'POST';
  let endpoint = '/sources';
  if (editingKey) {
    method = 'PUT';
    endpoint = `/sources/${encodeURIComponent(editingKey)}`;
  }
  const res = await fetch(endpoint, {
    method,
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ key, label, url, base, parser })
  });
  if (res.ok) {
    location.reload();
  } else {
    alert('Failed to save source');
  }
});

// Edit/delete handlers for tender sources
document.querySelectorAll('#sourceTable .sourceRow').forEach(row => {
  const key = row.dataset.key;
  const detail = document.querySelector(`.detailRow[data-key="${key}"]`);
  detail.querySelector('.editBtn').addEventListener('click', e => {
    e.stopPropagation();
    const s = sourceData[key];
    document.getElementById('newKey').value = key;
    document.getElementById('newKey').disabled = true;
    document.getElementById('newLabel').value = s.label;
    document.getElementById('newUrl').value = s.url;
    document.getElementById('newBase').value = s.base;
    // Pre-fill parser so it can be modified if needed
    document.getElementById('newParser').value = s.parser;
    document.getElementById('addBtn').textContent = 'Update Source';
    editingKey = key;
  });
  detail.querySelector('.cancelBtn').addEventListener('click', e => {
    e.stopPropagation();
    editingKey = null;
    document.getElementById('newKey').disabled = false;
    // Reset parser field to the default value
    document.getElementById('newParser').value = 'contractsFinder';
    document.getElementById('addBtn').textContent = 'Add Source';
  });
  detail.querySelector('.deleteBtn').addEventListener('click', async ev => {
    ev.stopPropagation();
    if (!confirm(`Delete source ${key}?`)) return;
    const res = await fetch(`/sources/${encodeURIComponent(key)}`, { method: 'DELETE' });
    if (res.ok) location.reload();
    else alert('Failed to delete source');
  });
});

// Add or update an award source.
document.getElementById('addAwardSourceForm').addEventListener('submit', async e => {
  e.preventDefault();
  const key = document.getElementById('newAwardKey').value.trim();
  const label = document.getElementById('newAwardLabel').value.trim();
  const url = document.getElementById('newAwardUrl').value.trim();
  const base = document.getElementById('newAwardBase').value.trim();
  // Award parser allows custom extraction from award feeds
  const parser = document.getElementById('newAwardParser').value.trim();
  let method = 'POST';
  let endpoint = '/award-sources';
  if (editingAwardKey) {
    method = 'PUT';
    endpoint = `/award-sources/${encodeURIComponent(editingAwardKey)}`;
  }
  const res = await fetch(endpoint, {
    method,
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ key, label, url, base, parser })
  });
  if (res.ok) {
    location.reload();
  } else {
    alert('Failed to save source');
  }
});

// Edit/delete handlers for award sources
document.querySelectorAll('#awardSourceTable .awardSourceRow').forEach(row => {
  const key = row.dataset.key;
  const detail = document.querySelector(`.awardDetailRow[data-key="${key}"]`);
  row.querySelector('.testAwardBtn').addEventListener('click', async e => {
    e.stopPropagation();
    row.querySelector('.status').textContent = 'testing...';
    const res = await fetch('/test-award-source?key='+encodeURIComponent(key));
    const data = await res.json();
    row.querySelector('.status').textContent = data.status;
  });
  row.querySelector('.scrapeAwardBtn').addEventListener('click', async e => {
    e.stopPropagation();
    row.querySelector('.status').textContent = 'scraping...';
    const res = await fetch('/scrape-awarded?source='+encodeURIComponent(key));
    const data = await res.json();
    row.querySelector('.status').textContent = 'added '+data.added;
  });
  detail.querySelector('.editBtn').addEventListener('click', e => {
    e.stopPropagation();
    const s = awardSourceData[key];
    document.getElementById('newAwardKey').value = key;
    document.getElementById('newAwardKey').disabled = true;
    document.getElementById('newAwardLabel').value = s.label;
    document.getElementById('newAwardUrl').value = s.url;
    document.getElementById('newAwardBase').value = s.base;
    // Pre-fill parser for award sources
    document.getElementById('newAwardParser').value = s.parser;
    document.getElementById('addAwardBtn').textContent = 'Update Award Source';
    editingAwardKey = key;
  });
  detail.querySelector('.cancelBtn').addEventListener('click', e => {
    e.stopPropagation();
    editingAwardKey = null;
    document.getElementById('newAwardKey').disabled = false;
    // Reset award parser to the default parser name
    document.getElementById('newAwardParser').value = 'contractsFinder';
    document.getElementById('addAwardBtn').textContent = 'Add Award Source';
  });
  detail.querySelector('.deleteBtn').addEventListener('click', async ev => {
    ev.stopPropagation();
    if (!confirm(`Delete source ${key}?`)) return;
    const res = await fetch(`/award-sources/${encodeURIComponent(key)}`, { method: 'DELETE' });
    if (res.ok) location.reload();
    else alert('Failed to delete source');
  });
});

// Handle deletion of all tenders via admin endpoint.
document.getElementById('deleteAllForm').addEventListener('submit', async e => {
  e.preventDefault();
  if (!confirm('Delete all tender records?')) return;
  const res = await fetch('/admin/delete-all', {
    method: 'POST',
    headers: { Accept: 'application/json' }
  });
  if (res.status === 401) {
    alert('Please log in first');
    window.location = '/login';
    return;
  }
  const data = await res.json().catch(() => null);
  if (res.ok && data && data.success) {
    alert('All tenders removed');
  } else {
    alert('Failed to delete records');
  }
});

// Delete tenders older than the user supplied date.
document.getElementById('deleteBeforeForm').addEventListener('submit', async e => {
  e.preventDefault();
  const date = document.getElementById('deleteDate').value;
  if (!date) return alert('Select a date first');
  if (!confirm(`Delete tenders before ${date}?`)) return;
  const res = await fetch('/admin/delete-before', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Accept: 'application/json'
    },
    body: JSON.stringify({ date })
  });
  if (res.status === 401) {
    alert('Please log in first');
    window.location = '/login';
    return;
  }
  const data = await res.json().catch(() => null);
  if (res.ok && data && data.success) {
    alert('Old tenders removed');
  } else {
    alert('Failed to delete records');
  }
});

// --- Cron schedule handling ----------------------------------------------
// Populate the cron schedule dropdowns with sequential numeric options
function fill(select, max) {
  for (let i = 0; i <= max; i++) {
    const opt = document.createElement('option');
    opt.value = i;
    opt.textContent = i;
    select.appendChild(opt);
  }
}
fill(document.getElementById('cronMin'), 59);
fill(document.getElementById('cronHour'), 23);
fill(document.getElementById('cronDom'), 31);
fill(document.getElementById('cronMon'), 12);
fill(document.getElementById('cronDow'), 6);

// Initialise selects based on the stored schedule from the server
const parts = '<%= cron %>'.split(' ');
document.getElementById('cronMin').value = parts[0];
document.getElementById('cronHour').value = parts[1];
document.getElementById('cronDom').value = parts[2];
document.getElementById('cronMon').value = parts[3];
document.getElementById('cronDow').value = parts[4];

const cronPreview = document.getElementById('cronPreview');
// Build a cron expression from the dropdowns. Cron syntax orders minute before hour.
function buildCron() {
  const min = document.getElementById('cronMin').value;
  const hour = document.getElementById('cronHour').value;
  const dom = document.getElementById('cronDom').value;
  const mon = document.getElementById('cronMon').value;
  const dow = document.getElementById('cronDow').value;
  const str = `${min} ${hour} ${dom} ${mon} ${dow}`;
  cronPreview.textContent = str;
  return str;
}
document.querySelectorAll('#cronForm select').forEach(sel => sel.addEventListener('change', buildCron));
buildCron();

// Submit the new schedule via the admin API so the server restarts the cron job
document.getElementById('cronForm').addEventListener('submit', async e => {
  e.preventDefault();
  const schedule = buildCron();
  const res = await fetch('/admin/cron', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Accept: 'application/json'
    },
    body: JSON.stringify({ schedule })
  });
  if (res.status === 401) {
    alert('Please log in first');
    window.location = '/login';
    return;
  }
  const data = await res.json().catch(() => null);
  if (res.ok && data && data.success) {
    alert('Schedule updated');
  } else {
    alert('Failed to update schedule');
  }
});
</script>
<script src="/table-tools.js"></script>
</body>
</html>
